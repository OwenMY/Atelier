// Product!!!
const getProductInfo = (id) => {
  let stylesArr = [];
  axios.get(`${config.url}/products/${id}`, config.auth) //get request to get the related item id array
  .then(res => {
    //console.log(res);
    setProductInfo(res.data);
  })
  .then(()=>{
    axios.get(`${config.url}/products/${id}/styles`, config.auth) //get request to get the related item id array
    .then(res => {
      //console.log(res.data.results); // I got photo info array
      //setThumbnailInfo(res.data.results);
      stylesArr.push(res.data.results)
    })
    .catch(err=> console.log(err));
  })
  .catch(err=> console.log(err));

  setThumbnailInfo(prevStyles => {
    prevStyles = stylesArr;
    return prevStyles;
  });
}

 useEffect(()=>{
    getProductInfo(id) // id = 65633
  },[])

  const getProductInfo = (id) => {
    let stylesArr = [];
    axios.get(`${config.url}/products/${id}`, config.auth) //get request to get the related item id array
    .then(res => {
      //console.log(res);
      setProductInfo(res.data);
    })
    .then(()=>{
      axios.get(`${config.url}/products/${id}/styles`, config.auth) //get request to get the related item id array
      .then(res => {
        //console.log(res.data.results); // I got photo info array
        //setThumbnailInfo(res.data.results);
        stylesArr.push(res.data.results)
      })
      .catch(err=> console.log(err));
    })
    .catch(err=> console.log(err));

    setThumbnailInfo(prevStyles => {
      prevStyles = stylesArr;
      return prevStyles;
    });
  }


  //card.jsx

   // const changeInfo = (info) => {
  //   setStyles(info);
  // };

  // useEffect(()=>{
  //   if(props.styleInfo !== []){
  //     console.log('call');
  //     changeInfo(props.styleInfo)
  //   }
  // },[])

  useEffect(()=>{
    console.log('style',styles)
  },[])


  //Modal
  import React, {useState, useEffect} from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import axios from 'axios';
import Modal from './Modal.jsx';

const ProductCard = styled.div`
display: flex;
flex-direction: column;
min-width: 10rem;
border: solid;
border-color: lightgray;
`;

const PreviewImg = styled.img`
flex-direction: column;
height : 100%;
`;

const Card = (props)=> {
  //console.log('syeye',props.styleInfo);
  //const modalEl = useRef('lala');
  const [show, setShow] = useState(false);

  var image = '';
  if(props.styleInfo.length === 0){
     image = '';
  } else {
     image = props.styleInfo[0].photos[0].thumbnail_url;
  }

  const handleClick = () => {
    if (!this.state.showModal) {
      document.addEventListener("click", this.handleOutsideClick, false);
    } else {
      document.removeEventListener("click", this.handleOutsideClick, false);
    }

    setOpen(prevShow => ( !show ));
  };

  const handleOutsideClick = e => {
    if (!this.node.contains(e.target)) setOpen(false);
  };

  const handleClickOutside = ({ target }) => {
    if (isOpen && !modalEl.current.contains(target)) setOpen(false);
  };

  // const showModal = () => {
  //   setShow(true);
  // };

  // const hideModal = () => {
  //   setShow(false);
  // };

  // check show value here
  // useEffect(()=>{
  //   console.log('show',show);
  // },[show])

  return(
  <ProductCard>

    <PreviewImg ref={node => {
          this.node = node;
        }} src={image} onClick={ () => handleClick() }></PreviewImg>
    { show && <Modal show={show} handleClose={hideModal}></Modal> }
    <div>{props.productInfo.category}</div>
    <div>{props.productInfo.name}</div>
    <div>{props.productInfo.default_price}</div>
  </ProductCard>
  )
}

export default Card;


const HeartCheckbox = styled.input`
  display: none;
`;

const HeartLabel = styled.label`
  color: ${({ checked }) => (checked ? "red" : "grey")};
  background-color: currentColor;
  display: inline-block;
  height: 70px;
  margin: 0 10px;
  top: 0;
  transform: rotate(-45deg);
  position: relative;
  left: 45%;
  top: 45%;
  width: 50px;

  &::before,
  &::after {
    content: "";
    background-color: currentColor;
    border-radius: 50%;
    height: 50px;
    position: absolute;
    width: 50px;
  }

  &:before {
    top: -25px;
    left: 0;
  }

  &:after {
    left: 25px;
    top: 0;
  }

`;

//index
return (
  <div title='TheProductList'>
    <Listtitle>Related List</Listtitle>
    <ProductList>
    {idArray.map((data,index)=> (
      <RelatedList id = {data} key = {index}/>
    ))}
  </ProductList>
  <Listtitle>Outfit List</Listtitle>
    <Outfit>
      <OutfitList/>
    </Outfit>
  </div>
);
};

//relate
 // slideRef.current.style.transition = "all 0.5s ease-in-out";
    // slideRef.current.style.transform = `translateX(-${currentSlide}00%)`; // 백틱을 사용하여 슬라이드로 이동하는 애니메이션을 만듭니다.


    import React, {useState, useEffect, useRef} from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import axios from 'axios';
import Card from './Cardp.jsx'
import CardList from './CardList.jsx';

const Container = styled.div`
  overflow : hidden;
`;
const SliderContainer = styled.div`
  width: 100%;
  display: flex;
  flex-direction: row;
  // justify-content : space-between;
  min-width: 0;
  flex: 1;
  margin: 10px;
`;

const Button = styled.button`
  display : none;

  ${SliderContainer}:hover & {
    all: unset;
    display : block;
    border: 1px solid coral;
    color: coral;
    border-radius: 10px;
    position: relative;
    padding-left: 10px;
    padding-right: 10px;

    &:hover {
      transition: all 0.3s ease-in-out;
      background-color: coral;
      color: #fff;
    }

  }

`;


const TOTAL_SLIDES = 2;
const postsPerPage = 5;

const RelatedList = ({relatedArray})=> {
  const [currentSlide, setCurrentSlide] = useState(0);
  const [indexOfFirst, setIndexOfFirst] = useState([0,5]);
  // const [indexOfLast, setIndexOfLast] = useState(5);
  // const [idArray, setIdArray] = useState([...relatedArray.slice(0, 5)]);
  // const [productInfo, setProductInfo] = useState({});
  // const [styleInfo, setStyleInfo] = useState([]);

  const slideRef = useRef(null);
  const nextSlide = () => {
      // if (currentSlide >= TOTAL_SLIDES) {
      //   setCurrentSlide(0);
      // } else {
        setCurrentSlide(currentSlide + 1)
        setIndexOfFirst([currentSlide * postsPerPage, postsPerPage * (currentSlide + 1)]);
    };
  const prevSlide = () => {
    if (currentSlide === 0) {
      setCurrentSlide(TOTAL_SLIDES);
    } else {
      setCurrentSlide(currentSlide - 1);
    }
  };

  useEffect(() => {
    // if(relatedArray.length > 5){
    // slideRef.current.style.transition = "all 0.5s ease-in-out";
    // const indexOfFirst = currentSlide * postsPerPage;
    // const indexOfLast = postsPerPage * (currentSlide + 1);
    // setIdArray([...relatedArray.slice(indexOfFirst, indexOfLast)]);
    // }
  }, [currentSlide]);



  if(relatedArray.length > 5){
    return (
        <SliderContainer ref={slideRef} >
           <Button onClick={prevSlide}>←</Button>
          <Card relatedArray={relatedArray.slice(indexOfFirst, indexOfLast)}/>
       <Button onClick={nextSlide}>→</Button>
        </SliderContainer>
    );

  } else {
    return(
      <SliderContainer>
        <CardList relatedArray={relatedArray}/>
      </SliderContainer>
    );

  }

}

  //check info value
  // useEffect(() => {
  //   console.log('pro',productInfo)
  //   console.log('sty',styleInfo)
  // }, [productInfo,styleInfo])


  // "https://images.unsplash.com/photo-1544441892-794166f1e3be?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80"


export default RelatedList;


{infoArray instanceof Array && styleArray instanceof Array
  && infoArray.slice(currentSlide * postsPerPage , postsPerPage * (currentSlide + 1))
  .map((data,index)=>(
    <Card productInfo={data} styleInfo = {styleArray[index]} key={index}/>
  ))}